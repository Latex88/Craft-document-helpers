{% extends "document-helpers/_layouts/cpp.twig" %}

{% import "_includes/forms" as forms %}

{% set edition = craft.app.plugins.getPlugin('document-helpers').edition %}
{% if edition == 'plus' %}
    {% set isEnabledPlus = true %}
    {% set isDisabledPlus = false %}
{% else %}
    {% set isEnabledPlus = false %}
    {% set isDisabledPlus = true %}
{% endif %}

{% set title = 'PDF Generator' %}

{% set selectedTab = 'general' %}

{% set tabs = {
    general: {label: 'General'|t, url: '#general'},
    metadata: {label: 'Metadata'|t, url: "#metadata"},
    protect: {label: 'Protection'|t, url: "#protect" },
    asset: {label: 'Assets'|t, url: "#asset"},
    thumb: {label: 'Thumbnails'|t, url: "#thumb" },
    optional: {label: 'Optional functions'|t, url: '#optional'}
} %}
{% block content %}

    <div class="tab-contents">

        <div id="content-general" class="tab-content">
            <h2>
                Edition
            </h2>
            <p>
                You are using the
                <strong>{{ craft.app.plugins.getPlugin('document-helpers').edition|upper }}</strong>
                plan of the PDF Generator plugin.</p>

            <h2>Welcome! General Settings</h2>

            <p>The general settings section allows you to configure the default values of the plugin for generating PDFs. You can customize the options for each PDF according to your needs.</p>

            <p>For more information about the available options, please visit
                <a href="https://github.com/cooltronicpl/Craft-document-helpers#overriding-default-options">this page</a>.</p>

            <p>You can override the default values in the Twig functions by passing a `pdfOptions` variable with the desired options.</p>
            {{ forms.textField({
label: "Header template" | t,
id: 'header',
name: 'header',
instructions: "The optional location of the template file for the header, which should be in the `/templates` directory. You can also use a URL or an HTML code block as a template. For example, `_pdf/header.html`, `https://example.com/someheader` or `<h1>My Header</h1>`."|t,
value: settings. header|default(null),
errors: settings.getErrors('header')

}) }}

            {{ forms.textField({
label: "Footer template" | t,
id: 'footer',
name: 'footer',
instructions: "The optional location of the template file for the footer, which should be in the `/templates` directory. You can also use a URL or an HTML code block as a template. For example, `_pdf/footer.twig`, `https://example.com/somefooter` or `<p>My Footer</p>`."|t,
value: settings. header|default(null),
errors: settings.getErrors('footer')

}) }}
            {{ forms.textField({ label: "Margin top" | t, id: 'margin_top', name: 'margin_top', instructions: "This is the top margin of the PDF in millimetres. The default value is 30."|t, value: settings. margin_top|default(null), errors: settings.getErrors('margin_top') }) }}
            {{ forms.textField({ label: "Margin bottom" | t, id: 'margin_bottom', name: 'margin_bottom', instructions: "This is the bottom margin of the PDF in millimetres. The default value is 30."|t, value: settings. margin_bottom|default(null), errors: settings.getErrors('margin_bottom') }) }}

            {{ forms.textField({
label: "Margin left" | t,
id: 'margin_left',
name: 'margin_left',
instructions: "This is the left margin of the PDF in millimetres. The default value is 15."|t,
value: settings. margin_left|default(null),
errors: settings.getErrors('margin_left')

}) }}
            {{ forms.textField({ label: "Margin right" | t, id: 'margin_right', name: 'margin_right', instructions: "This is the right margin of the PDF in millimetres. The default value is 15."|t, value: settings. margin_right|default(null), errors: settings.getErrors('margin_right') }) }}
            {{ forms.textField({ label: "Page numbers" | t, id: 'pageNumbers', name: 'pageNumbers', instructions: "This is the format of the page numbers that will be added in the footer of the PDF. For example, you can use '{PAGENO}/{nbpg}' to show the current page and the total number of pages."|t, value: settings. pageNumbers|default(null), errors: settings.getErrors('pageNumbers') }) }}

            {{ forms.textField({
label: "Title" | t,
id: 'title',
name: 'title',
instructions: "This is the title of the PDF document that will be shown in the metadata and the browser tab."|t,
value: settings. title|default(null),
errors: settings.getErrors('title')

}) }}

            {{ forms.lightswitchField({
    label: "Landscape" | t,
    id: 'landscape',
    name: 'landscape',
    instructions: "This option sets the orientation of the PDF to the landscape. This can be useful for documents with wide tables or charts." | t,
    on: settings.landscape,

}) }}
            {{ forms.lightswitchField({
    label: "Portrait" | t,
    id: 'portrait',
    name: 'portrait',
    instructions: "This option sets the orientation of the PDF to portrait. This is the default option for most documents." | t,
    on: settings.portrait,
}) }}
            {{ forms.textField({
    label: "Format" | t,
    id: 'format',
    name: 'format',
    instructions: "This option sets the paper size for the PDF. The default value is A4, but you can use other sizes compatible with MPDF. Some popular formats are: A3, A4 (default), A5, Letter (8.5 x 11 in), Legal (8.5 x 14 in), Executive (7.25 x 10.5 in), B4, B5."|t,
    value: settings. format|default(null),
    errors: settings.getErrors('format')
}) }}
            {{ forms.textField({
    label: "Start page" | t,
    id: 'startPage',
    name: 'startPage',
    instructions: "This option sets the first page of the PDF to be generated. You can use this option to skip unnecessary pages from the beginning of the PDF. For example, `2` will skip the first page of the PDF."|t,
    value: settings. startPage|default(null),
    errors: settings.getErrors('startPage')
}) }}
            {{ forms.textField({
    label: "End page" | t,
    id: 'endPage',
    name: 'endPage',
    instructions: "This option sets the last page of the PDF to be generated. You can use this option to skip unnecessary pages from the end of the PDF. For example, `10` will generate a PDF with only the first 10 pages."|t,
    value: settings. endPage|default(null),
    errors: settings.getErrors('endPage')
}) }}
            {{ forms.textField({
            label: "PDF Generation Mode (Plus)" | t,
            id: 'generateMode',
            name: 'generateMode',
            instructions: "This option requires the **Plus** plan, choose the generation mode of the PDFs. You can use `pdfa` for PDF-A, `pdfx` for PDF-X, `pdfaauto` for PDF-A with common corrections, or `pdfxauto` for PDF-X with common corrections."|t,
            value: settings.generateMode|default(null),
            errors: settings.getErrors('generateMode'),
        }) }}
            {{ forms.textField({
            label: "PDF Colorspace" | t,
            id: 'colorspace',
            name: 'colorspace',
            instructions: "To adjust the colourspace of PDFs, choose `1` for grayscale, `2` for RGB, `3` for CMYK, or `0` for no restriction."|t,
            value: settings.colorspace|default(null),
            errors: settings.getErrors('colorspace'),
            disabled: isDisabledPlus
        }) }}
            {{ forms.textField({
    label: "Watermark image" | t,
    id: 'watermarkImage',
    name: 'watermarkImage',
    instructions: "This option adds a watermark to the PDF using the image file specified by the path. The image file must be accessible by the server."|t,
    value: settings. watermarkImage|default(null),
    errors: settings.getErrors('watermarkImage')
}) }}
            {{ forms.textField({
    label: "Watermark text" | t,
    id: 'watermarkText',
    name: 'watermarkText',
    instructions: "This option adds a watermark to the PDF using the text provided. You can use HTML tags to style the text."|t,
    value: settings. watermarkText|default(null),
    errors: settings.getErrors('watermarkText')
}) }}
            {{ forms.textField({ label: "Encoding" | t, id: 'encoding', name: 'encoding', instructions: "This is the encoding of the input of your PDF. The default value is 'UTF-8'."|t, value: settings. encoding|default(null), errors: settings.getErrors('encoding') }) }}

            {{ forms.lightswitchField({
label: "No automatic page break" | t,
id: 'no_auto_page_break',
name: 'no_auto_page_break',
instructions: "This option disables the automatic system page breaks. You can use this option if you want to manually add page breaks with the <pagebreak> tag. This can help you control the layout of your PDFs better." | t,
on: settings.no_auto_page_break,

}) }}
            {{ forms.textField({ label: "Temporary directory" | t,id: 'tempDir', name: 'tempDir', instructions: "This is the path of the temporary directory that will be used for generating PDFs. You can use the main /tmp directory on the server for better performance. This can be useful if you are generating multiple PDFs at once."|t, value: settings. tempDir|default(null), errors: settings.getErrors('tempDir') }) }}

            {{ forms.lightswitchField({
    label: "Mirror margins" | t,
    id: 'mirrorMargins',
    name: 'mirrorMargins',
    instructions: "This option enables different margins for odd and even pages. This can be useful for printing double-sided documents." | t,
    on: settings.mirrorMargins,

}) }}
            {{ forms.lightswitchField({
    label: "Automatic Table of Contents" | t,
    id: 'autoToC',
    name: 'autoToC',
    instructions: "This option creates a Table of Contents for the PDF using the H1-H6 tags in your document. The Table of Contents will be inserted at the beginning of the PDF."|t,
    on: settings.autoToC,
}) }}
            {{ forms.lightswitchField({
    label: "Automatic bookmarks" | t,
    id: 'autoBookmarks',
    name: 'autoBookmarks',
    instructions: "This option creates bookmarks for the PDF using the H1-H6 tags in your document. The bookmarks will be shown in the sidebar of the PDF viewer."|t,
    on: settings.autoBookmarks,
}) }}
            {{ forms.lightswitchField({
    label: "Provided URL Rendering Attributes" | t,
    id: 'URLTwigRender',
    name: 'URLTwigRender',
    on: settings.URLTwigRender,
    instructions: "This option enables the rendering of Twig variables like `{{custom}}` or `{{qrimg}}` in external URLs for `template`, `header` or `footer`. This can be useful for adding dynamic content to your PDFs." | t,
}) }}
            {{ forms.textField({
    label: "URL Mode" | t,
    id: 'URLMode',
    name: 'URLMode',
    instructions: "This option enables getting external URLs when set to `curl` with cURL or `simplehtml` with an optional package instead of `file_get_contents`. This can improve the performance and reliability of fetching external URLs." | t,
    value: settings. watermarkImage|default(null),
    errors: settings.getErrors('URLMode')
}) }}
            {{ forms.lightswitchField({

            label: "Disable compression" | t,
            id: 'disableCompression',
            name: 'disableCompression',
            instructions: "Turn this on to disable compression of the generated PDF file. This may increase the file size but also improve the quality."|t,
            on: settings.disableCompression,
        }) }}
        {{ forms.lightswitchField({

            label: "Convert images as inline as CMYK (requires ImageMagick with Plus)",
            id: 'convertImgToCMYK',
            name: 'convertImgToCMYK',
            instructions: "Turn this on to convert images in PDF to CMYK format ie. for PDF-X."|t,
            on: settings.convertImgToCMYK
        }) }}
            {{ forms.textField({
    label: "Debug log path" | t,
    id: 'log',
    name: 'log',
    instructions: "Set log file to print output of debug mPDF into the specified file. For example, `@alias(root) ~ '\mpdf.txt'`."|t,
    value: settings. log|default(null),
    errors: settings.getErrors('log')
}) }}
        </div>
        <div id="content-metadata" class="tab-content">
            {{ forms.textField({
    label: "Author" | t,
    id: 'author',
    name: 'author',
    instructions: "This option sets the author name for the PDF metadata. You can enter any string as the author name."|t,
    value: settings. author|default(null),
    errors: settings.getErrors('author')
}) }}
            {{ forms.textField({
    label: "Keywords" | t,
    id: 'keywords',
    name: 'keywords',
    instructions: "This option sets the keywords for the PDF metadata. You can enter a comma-separated list of keywords that describe the content of the PDF."|t,
    value: settings. keywords|default(null),
    errors: settings.getErrors('keywords')
}) }}
            {{ forms.lightswitchField({
    label: "Disable copyrights - Remove watermark (Plus)" | t,
    id: 'disableCopyright',
    name: 'disableCopyright',
    instructions: "This option removes the plugin's invisible watermark from the PDF. This option is only available for the Plus plan users."|t,
    on: settings.disableCopyright,
    disabled: isDisabledPlus

}) }}
        </div>
        <div id="content-asset" class="tab-content">
            {{ forms.textField({
    label: "Asset title" | t,
    id: 'assetTitle',
    name: 'assetTitle',
    instructions: "This option sets the title for the Asset in the Craft CMS system when you use the `pdfAsset` method. You can enter any string as the asset title."|t,
    value: settings. assetTitle|default(null),
    errors: settings.getErrors('assetTitle')
}) }}
            {{ forms.textField({
    label: "Asset filename" | t,
    id: 'assetFilename',
    name: 'assetFilename',
    instructions: "This option sets the filename for the Asset in the Craft CMS system when you use the `pdfAsset` method. You can enter any string as the asset filename."|t,
    value: settings. assetFilename|default(null),
    errors: settings.getErrors('assetFilename') 
}) }}
            {{ forms.lightswitchField({
    label: "Delete temporary file" | t,
    id: 'assetDelete',
    name: 'assetDelete',
    on: settings.assetDelete,
    instructions: "This option deletes the temporary file that is generated in the `@root` path when you use the `pdfAsset` method. This option can save disk space, but it may also increase the resource consumption. This is because the Asset and the PDF are regenerated on every load when you use the `pdfAsset` method." | t,
}) }}
            {{ forms.textField({
    label: "Asset site ID" | t,
    id: 'assetSiteId',
    name: 'assetSiteId',
    instructions: "This option sets the site ID for the Asset when you use the `pdfAsset` method. You can enter a numeric value that corresponds to the ID of the site that you want the Asset to belong to."|t,
    value: settings. assetSiteId|default(null),
    errors: settings.getErrors('assetSiteId')
}) }}

        </div>
        <div id="content-thumb" class="tab-content">

            <h2>Thumbnails with configured ImageMagick</h2>

            <p>To generate thumbnails, you need to have ImageMagick properly configured on your server (host). For more details, please visit
                <a href="https://github.com/cooltronicpl/Craft-document-helpers#what-if-i-cannot-generate-thumbnails-with-enabled-imagemagick">this page</a>.</p>

            {{ forms.lightswitchField({
    label: "Asset thumbnail" | t,
    id: 'assetThumb',
    name: 'assetThumb',
    on: settings.assetThumb,
    instructions: "This option generates a thumbnail image of a Craft CMS image Asset using the `pdfAsset` method (requires ImageMagick). You can access the thumbnail image in the Twig template as `asset.assetThumb`." | t,
}) }}
            {{ forms.textField({
    label: "Asset thumbnail volume handle" | t,
    id: 'assetThumbVolumeHandle',
    name: 'assetThumbVolumeHandle',
    instructions: "This option sets the volume handle for the thumbnail image. If not provided, the PDF volume handle is used. The volume handle must have a `Base URL` in your test: `@web\pdffiles` in Craft CMS Filesystems, Assets settings."|t,
    value: settings. assetThumbVolumeHandle|default(null),
    errors: settings.getErrors('assetThumbVolumeHandle')
}) }}
            {{ forms.lightswitchField({
    label: "Dumb thumbnail" | t,
    id: 'dumbThumb',
    name: 'dumbThumb',
    on: settings.dumbThumb,
    instructions: "This option generates a basic thumbnail image (without an Asset) using the `pdf` method (requires ImageMagick)."|t,
}) }}


            <p>
                Both `assetThumb` and `dumbThumb` support the following optional customizations:
            </p>

            {{ forms.textField({
    label: "Thumbnail type" | t,
    id: 'thumbType',
    name: 'thumbType',
    instructions: "This option sets the format of the thumbnail image. You can choose from `jpg`, `gif`, `webp`, `avif`, and `png`. The default format is `jpg`."|t,
    value: settings. thumbType|default(null),
    errors: settings.getErrors('thumbType')
}) }}
            {{ forms.textField({
    label: "Thumbnail width" | t,
    id: 'thumbWidth',
    name: 'thumbWidth',
    instructions: "This option sets the width of the thumbnail image in pixels. The default width is `210`."|t,
    value: settings. thumbWidth|default(null),
    errors: settings.getErrors('thumbWidth')
}) }}
            {{ forms.textField({
    label: "Thumbnail height" | t,
    id: 'thumbHeight',
    name: 'thumbHeight',
    instructions: "This option sets the height of the thumbnail image in pixels. The default height is `297`."|t,
    value: settings. thumbHeight|default(null),
    errors: settings.getErrors('thumbHeight')
}) }}
            {{ forms.textField({
    label: "Thumbnail page" | t,
    id: 'thumbPage',
    name: 'thumbPage',
    instructions: "This option sets the page number to generate the thumbnail image from. The default is the first page, which is numbered from `0`."|t,
    value: settings. thumbPage|default(null),
    errors: settings.getErrors('thumbPage')
}) }}
            {{ forms.lightswitchField({
    label: "Thumbnail best fit" | t,
    id: 'thumbBestfit',
    name: 'thumbBestfit',
    instructions: "This option determines whether to fit the image within the given dimensions or not. If on, the image will be scaled down to fit the aspect ratio of the original image. If off, the image will be stretched or cropped to fill the given dimensions." | t,
    on: settings.thumbBestfit,
}) }}
            {{ forms.textField({
    label: "Thumbnail background colour" | t,
    id: 'thumbBgColor',
    name: 'thumbBgColor',
    instructions: "This option sets the background colour of the thumbnail image. You can use colour names or codes, such as `black`, `rgb(33,66,99)`, or `#123456`. The default colour is `white`."|t,
    value: settings. thumbBgColor|default(null),
    errors: settings.getErrors('thumbBgColor')
}) }}
            {{ forms.textField({
    label: "Thumbnail trim" | t,
    id: 'thumbTrim',
    name: 'thumbTrim',
    instructions: "This option trims the page and centres the content of the thumbnail image. The default value is `false`, which means no trimming."|t,
    value: settings. thumbTrim|default(null),
    errors: settings.getErrors('thumbTrim')
}) }}
            {{ forms.textField({
    label: "Thumbnail trim frame colour" | t,
    id: 'thumbTrimFrameColor',
    name: 'thumbTrimFrameColor',
    instructions: "This option sets the colour of the trim frame of the thumbnail image. You can use colour names or codes, such as `black`, `rgb(12,1,2)`, or `#662266`. The default colour is `white`."|t,
    value: settings. thumbTrimFrameColor|default(null),
    errors: settings.getErrors('thumbTrimFrameColor')
}) }}
        </div>
        <div id="content-protect" class="tab-content">

            {{ forms.textField({
    label: "Password" | t,
    id: 'password',
    name: 'password',
    instructions: "This option sets a password for the PDF file. The user will need to enter the password to open or modify the PDF file."|t,
    value: settings. password|default(null),
    errors: settings.getErrors('password')
}) }}

            {{ forms.lightswitchField({
    label: "Protection mode (Plus)" | t,
    id: 'protection',
    name: 'protection',
    instructions: "This option enables the protection mode for the PDF file. The protection mode allows you to restrict the actions that can be performed on the PDF file according to ISO or DIN standards. This option is only available for the Plus plan users."|t,
    on: settings.protection,
    disabled: isDisabledPlus

}) }}
            <p>The protection mode supports the following options:</p>

            {{ forms.lightswitchField({
    label: "Allow copy (Plus)" | t,
    id: 'protectionCopy',
    name: 'protectionCopy',
    instructions: "This option allows the user to copy text and graphics from the PDF file to the clipboard. This option is only available for the Plus plan users." | t,
    on: settings.protectionCopy,
    disabled: isDisabledPlus
}) }}
            {{ forms.lightswitchField({
    label: "Allow print (Plus)" | t,
    id: 'protectionPrint',
    name: 'protectionPrint',
    instructions: "This option allows the user to print the PDF file in low resolution (150 dpi). This option is only available for the Plus plan users." | t,
    on: settings.protectionPrint,
    disabled: isDisabledPlus
}) }}
            {{ forms.lightswitchField({
    label: "Allow print in high resolution (Plus)" | t,
    id: 'protectionPrintHighres',
    name: 'protectionPrintHighres',
    instructions: "This option allows the user to print the PDF file in high resolution (300 dpi or more). This option is only available for the Plus plan users." | t,
    on: settings.protectionPrintHighres,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow modify contents (Plus)" | t,
    id: 'protectionModify',
    name: 'protectionModify',
    instructions: "This option allows the user to modify the contents of the PDF file, such as adding or deleting text, images, or pages. This option is only available for the Plus plan users." | t,
    on: settings.protectionModify,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow annotations and form fields (Plus)" | t,
    id: 'protectionAnnotForms',
    name: 'protectionAnnotForms',
    instructions: "This option allows the user to add annotations and form fields to the PDF file, such as comments, highlights, or signatures. This option is only available for the Plus plan users." | t,
    on: settings.protectionAnnotForms,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow extracting content (Plus)" | t,
    id: 'protectionExtract',
    name: 'protectionExtract',
    instructions: "This option allows the user to extract text and graphics from the PDF file to other applications or files. This option is only available for the Plus plan users." | t,
    on: settings.protectionExtract,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow assembling pages (Plus)" | t,
    id: 'protectionAssemble',
    name: 'protectionAssemble',
    instructions: "This option allows the user to assemble pages and documents in the PDF file, such as inserting, deleting, rotating, or reordering pages. This option is only available for the Plus plan users." | t,
    on: settings.protectionAssemble,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow fill forms (Plus)" | t,
    id: 'protectionFillForms',
    name: 'protectionFillForms',
    instructions: "This option allows the user to fill in the existing form fields in the PDF file. This option is only available for the Plus plan users." | t,
    on: settings.protectionFillForms,
    disabled: isDisabledPlus

}) }}
            {{ forms.lightswitchField({
    label: "Allow reading without password (Plus)" | t,
    id: 'protectionNoUserPassword',
    name: 'protectionNoUserPassword',
    instructions: "This option allows the user to open the PDF file without entering a password. This option is only available for the Plus plan users." | t,
    on: settings.protectionNoUserPassword,
    disabled: isDisabledPlus

}) }}
        </div>
        <div id="content-optional" class="tab-content">
            <h2>
                Install optional packages
            </h2>
            <p>
                The optional packages are additional features that you can enable or disable in the plugin settings. They provide more functionality and customization for the PDF generation process. The optional packages are:
            </p>
            <ul>
                <li>
                    <a href="https://github.com/chillerlan/php-qrcode">chillerlan/php-qrcode</a>
                    for QR Code generation</li>
            </li>
            <li>
                <a href="https://github.com/ezyang/htmlpurifier">ezyang/htmlpurifier</a>
                for HTML (URL) purification for problems with scraped websites on some URLs.</li>
        </li>
        <li>
            <a href="https://github.com/simplehtmldom/simplehtmldom">simplehtmldom/simplehtmldom</a>
            HTML Parser for images conversion to CMYK in HTML content or getURL in <code>URLMode</code> as <code>simplehtml</code>.</li>
    </li>
</ul>
{% set craftVersion = craft.app.getVersion() %}

{% set versions = {} %}

{% if craftVersion starts with '3.' %}
    {% set versions = {
        'chillerlan/php-qrcode': '3.4',
        'ezyang/htmlpurifier': '4.13',
        'simplehtmldom/simplehtmldom': '2.0-RC'
    } %}
{% elseif craftVersion starts with '4.' %}
    {% set versions = {
        'chillerlan/php-qrcode': '4.3',
        'ezyang/htmlpurifier': '4.17',
        'simplehtmldom/simplehtmldom': '2.0-RC'
    } %}
{% elseif craftVersion starts with '5.' %}
    {% set versions = {
        'chillerlan/php-qrcode': '4.3',
        'ezyang/htmlpurifier': '4.17',
        'simplehtmldom/simplehtmldom': '2.0-RC'
    } %}
{% endif %}{% js at endBody %}
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
    function decodeHtmlEntities(str) {
        var div = document.createElement("div");
        div.innerHTML = str;
        return div.textContent || div.innerText || "";
    }
    function eraseCookie(name) {
        document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;";
    }
{% endjs %}
{% for package, version in versions %}
    {% set isInstalledPackage = craft.packageManagerPDFGenerator.isInstalledPackage(package) %}
    {% set lightswitchValue = isInstalledPackage ? '1' : '0' %}
    {% set packageCookie = actionUrl('document-helpers/install/toggle-package/', { package: package, version: version, installed: lightswitchValue }) %}
    {% js at endBody %}
    eraseCookie("package-{{ package|replace({'/': '_'}) }}");
    setCookie("package-{{ package|replace({'/': '_'}) }}", decodeHtmlEntities("{{ packageCookie }}"), 1);
    {% endjs %}
    {{ forms.lightswitchField({
        label: "Install " ~ package ~ " package" | t,
        id: 'package-' ~ package|replace({'/': '_'}),
        name: 'package-' ~ package|replace({'/': '_'}),
        on: lightswitchValue,
        instructions: "This option enables to install optional package" ~ package | t,
    }) }}
{% endfor %}

<script>
    var versions = {{ versions|json_encode|raw }};
</script>


{{ forms.lightswitchField({
    label: "Purify URL (input HTML)" | t,
    id: 'URLPurify',
    name: 'URLPurify',
    on: settings.URLPurify,
    instructions: "This option enables purification of the HTML content from external URLs by using an external library. This can help you avoid problems with scraped websites on some URLs." | t,
}) }}
<h2>Status of installation</h2> 
<div id="package-status"></div>

{{forms.textField({
    label: "Custom PHP binary path" | t,
    id: 'phpPath',
    name: 'phpPath',
    instructions: "This option lets you specify the custom PHP binary path, such as '\/usr\/bin\/php', 'php', or 'php8.0'. This can help you avoid issues with installing packages that depend on the PHP path."|t,
    value: settings.phpPath|default(null),
    errors: settings.getErrors('phpPath')
}) }}</div></div>{% endblock %}{% html at head %}<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>{% endhtml %}{% js at endBody %}$(document).ready(function () {
                    var packages = ["chillerlan/php-qrcode", "ezyang/htmlpurifier", "simplehtmldom/simplehtmldom"];
        var observers = {};
        var ps = document.getElementById("settings-package-status");
        for (let package of packages) {
            const packageName = package;
            let sanitizedPackageName = packageName.replace('/', '_');
        
            let button = document.getElementById("settings-package-" + sanitizedPackageName);
        
            let callback = function (mutationsList) {
                for (let mutation of mutationsList) {
                    if (mutation.type == "attributes") {
                        if (mutation.attributeName == "aria-checked") {
                            const actionUrl = getCookie("package-" + sanitizedPackageName);
                    let lightswitchFieldPackage = document.getElementById("settings-"+"package-" + sanitizedPackageName);
                    lightswitchFieldPackage.disabled = true;
                    let lightswitchFieldPackageContainer = document.getElementById("settings-"+"package-" + sanitizedPackageName+"-field");
                    let lightswitchPackageContainerHandle = document.querySelector("#settings-"+"package-" + sanitizedPackageName+"-field .lightswitch-container");
                    lightswitchFieldPackageContainer.classList.add("disabled");
                            $.ajax({
                                type: 'POST',
                                url: actionUrl,
                                data: {
                                    [window.Craft.csrfTokenName]: window.Craft.csrfTokenValue,
                                },
                                success: function (response) {
                                    if (response.success && response.installed == true) {
                                        $("settings-package-" + sanitizedPackageName).prop('checked', true);
                                        Craft.cp.displayNotice(response.message);
                                        let packageCookieUrl = '{{ actionUrl("document-helpers/install/toggle-package/") }}';
                                        packageCookieUrl += '&package=' + packageName + '&version=' + versions[package] + '&installed=' + 1;
                                        setCookie("package-" + sanitizedPackageName, decodeHtmlEntities(packageCookieUrl), 1);
                                    } else if (response.success && response.installed == false) {
                                        $('#settings-package-' + sanitizedPackageName).prop('checked', false);
                                        Craft.cp.displayNotice(response.message);
                                        let packageCookieUrl = '{{ actionUrl("document-helpers/install/toggle-package/") }}';
                                        packageCookieUrl += '&package=' + packageName + '&version=' + versions[package] + '&installed=' + 0;
                                        setCookie("package-" + sanitizedPackageName, decodeHtmlEntities(packageCookieUrl), 1);
                                    } else if (response.success == false && response.installed == false) {
                                        lightswitchFieldPackage.classList.add("on");
                                        Craft.cp.displayError(response.message);
                                        lightswitchPackageContainerHandle.style.marginLeft = '0';

                                    } else if (response.success == false && response.installed == true){
                                        lightswitchFieldPackage.classList.remove("on");
                                        Craft.cp.displayError(response.message);
                                        lightswitchPackageContainerHandle.style.marginLeft = '-12px';
                                    }
                                    else {
                                        Craft.cp.displayError('There was an error installing the package ' + packageName + ': ' + response.message);
                                    }
                                    ps.innerHTML += "<p>"+response.message+"</p>";
                                    lightswitchFieldPackage.disabled = false;
                                    lightswitchFieldPackageContainer.classList.remove("disabled");
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    Craft.cp.displayError('There was an error sending the request: ' + errorThrown);
                                    lightswitchFieldPackage.disabled = false;
                                    lightswitchFieldPackageContainer.classList.remove("disabled");
                                }
                            });
                        }
                    }
                }
            };
        
            let observer = new MutationObserver(callback);
        
            let options = {
                attributes: true,
                attributeFilter: ["aria-checked"],
                attributeOldValue: true
            };
        
            observers[package] = { button, observer, options };
        
            observer.observe(button, options);
        }
                    $('.tab-content').hide();
                    
                    $('.tab-content:first').show();
                    
                    $('.scrollable a').click(function () {
                    
                    var tabId = $(this).attr('id').replace('settings-tab-', '');
                    $('.tab-content').hide();
                    
                    $('#settings-content-' + tabId).show();
                    $('.sel').removeClass('sel');
                    $(this).addClass('sel');
                    });
                    });
                    var fields = [
                    "protection",
                    "protectionCopy",
                    "protectionPrint",
                    "protectionModify",
                    "protectionAnnotForms",
                    "protectionExtract",
                    "protectionAssemble",
                    "protectionFillForms",
                    "protectionPrintHighres",
                    "protectionNoUserPassword",
                    "disableCopyright",
                    "generateMode",
                    "convertImgToCMYK"
                    ];
                    if ({% if isDisabledPlus %}true{% else %}false{% endif %}==true) {
                    for (var field of fields) {
                    var lightswitchField = document.getElementById("settings-"+field);
                    lightswitchField.disabled = true;
                    lightswitchField.classList.remove("on");
                    var lightswitchFieldContainer = document.getElementById("settings-"+field+"-field");
                    lightswitchFieldContainer.classList.add("disabled");
                    }
                    }
                
                   function getCookie(name) {
                  var nameEQ = name + "=";
                  var ca = document.cookie.split(";");
                  for (var i = 0; i < ca.length; i++) {
                    var c = ca[i].trim();
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                  }
                  return null;
                }{% endjs %}
